{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pathfinder CloudEvents Microservice","text":"<p>Receives RestApi requests from Pathfinder, converts them into RaBe CloudEvents, and stores the resulting CloudEvent in a Kafka topic.</p> <p>This service aims at replacing the previous LWRP based implementation which itself was highly influenced by the original serial implementation that was carried over to the digital domain during our analog to digital migration in an effort to reduce the migrations blast radius.</p>"},{"location":"#usage","title":"Usage","text":"<p>The service is deployed to our container infrastructure and it provides a <code>/webhook</code> endpoint that receives POST requests from Pathfinder. The body of this request contains information in a query string style, specifically Pathfinder sends us a <code>event</code> and <code>channel</code> value. The <code>event</code> is either <code>OnAir</code> or <code>OffAir</code> and the channel indicates which audio source is currently routed to our broadcast infrastructure.</p> <p>Information on available configuration options is available via the <code>--help</code> argument:</p> <pre><code>podman run --rm ghcr.io/radiorabe/pathfinderevents pathfinderevents --help\n</code></pre>"},{"location":"#links","title":"Links","text":"<ul> <li>Pathfinder RestApi documentation</li> </ul>"},{"location":"#release-management","title":"Release Management","text":"<p>The CI/CD setup uses semantic commit messages following the conventional commits standard. The workflow is based on the RaBe shared actions and uses go-semantic-commit to create new releases.</p> <p>The commit message should be structured as follows:</p> <pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <p>The commit contains the following structural elements, to communicate intent to the consumers of your library:</p> <ol> <li>fix: a commit of the type <code>fix</code> patches gets released with a PATCH version bump</li> <li>feat: a commit of the type <code>feat</code> gets released as a MINOR version bump</li> <li>BREAKING CHANGE: a commit that has a footer <code>BREAKING CHANGE:</code> gets released as a MAJOR version bump</li> <li>types other than <code>fix:</code> and <code>feat:</code> are allowed and don't trigger a release</li> </ol> <p>If a commit does not contain a conventional commit style message you can fix it during the squash and merge operation on the PR.</p>"},{"location":"#build-process","title":"Build Process","text":"<p>The CI/CD setup uses Docker build-push Action  to publish container images. The workflow is based on the RaBe shared actions.</p>"},{"location":"#license","title":"License","text":"<p>This application is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, version 3 of the License.</p>"},{"location":"#copyright","title":"Copyright","text":"<p>Copyright (c) 2023 Radio Bern RaBe</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>pathfinderevents</li> </ul>"},{"location":"reference/pathfinderevents/","title":"pathfinderevents","text":""},{"location":"reference/pathfinderevents/#pathfinderevents.ApiServer","title":"<code>ApiServer</code>","text":"<p>The API server.</p> Source code in <code>pathfinderevents.py</code> <pre><code>class ApiServer:\n\"\"\"The API server.\"\"\"\ndef __init__(\nself,\nbind_addr: str,\nbind_port: int,\nrealm: str,\ntopic: str,\nusername: str,\npassword: str,\ndebug: bool = False,\n):\nself.producer: KafkaProducer\nself.bind_addr: str = bind_addr\nself.bind_port: int = bind_port\nself.realm = realm\nself.topic = topic\nself.username = username\nself.password = password\nself.debug = debug\nself.url_map = Map([Rule(\"/webhook\", endpoint=\"webhook\")])\ndef set_producer(self, producer: KafkaProducer):\nself.producer = producer\ndef run_server(self):\n\"\"\"Run the API server.\"\"\"\nif not self.producer:\nraise RuntimeError(\"run_server called before set_producer\")\nif self.debug:\nfrom werkzeug.serving import run_simple\nself._server = run_simple(\nself.bind_addr,\nself.bind_port,\nself,\nuse_debugger=True,\nuse_reloader=True,\n)\nelse:  # pragma: no cover\ncherrypy.tree.graft(self, \"/\")\ncherrypy.server.unsubscribe()\nself._server = cherrypy._cpserver.Server()\nself._server.socket_host = self.bind_addr\nself._server.socket_port = self.bind_port\nself._server.subscribe()\ncherrypy.engine.start()\ncherrypy.engine.block()\ndef stop_server(self):\n\"\"\"Stop the server.\"\"\"\nself._server.stop()\ncherrypy.engine.exit()\ndef __call__(self, environ, start_response):\nreturn self.wsgi_app(environ, start_response)\ndef wsgi_app(self, environ, start_response):\nrequest = Request(environ)\nauth = request.authorization\nif auth and self.check_auth(auth.username, auth.password):\nresponse = self.dispatch_request(request)\nelse:\nresponse = self.auth_required(request)\nreturn response(environ, start_response)\ndef check_auth(self, username, password):\n\"\"\"Check plaintext auth.\n        Pathfinder doesn't support sending any advanced API credentials like JWT or\n        similar so we resort to the most insecure way possible to authenticate its\n        requests.\n        \"\"\"\nreturn self.username == username and self.password == password\ndef auth_required(self, request):\n\"\"\"Return a 401 unauthorized reponse.\"\"\"\nreturn Response(\n\"Could not verify your access level for that URL.\\n\"\n\"You have to login with proper credentials\",\nstatus=401,\nheaders={\"WWW-Authenticate\": f'Basic realm=\"{self.realm}\"'},\n)\ndef dispatch_request(self, request):\n\"\"\"Dispatch request and return any errors in response.\"\"\"\nadapter = self.url_map.bind_to_environ(request.environ)\ntry:\nendpoint, values = adapter.match()\nreturn getattr(self, f\"on_{endpoint}\")(request, **values)\nexcept HTTPException as e:\nreturn Response(\njson.dumps(e.description),\ne.code,\n{\"Content-Type\": \"application/json\"},\n)\ndef on_webhook(self, request):\n\"\"\"Receive a Pathfinder RestApi call and produce a CloudEvent.\"\"\"\ndef on_send_error(ex):  # pragma: no cover\nlogger.error(\"Failed to send CloudEvent\", exc_info=ex)\nce = from_pathfinder_request(request)\nkafka_msg = to_structured(\nce,\nkey_mapper=lambda event: \".\".join(\n[\nce.get(\"type\"),\nce.get(\"subject\"),\n]\n),\n)\nself.producer.send(\nself.topic,\nkey=kafka_msg.key,\nvalue=kafka_msg.value,\nheaders=kafka_msg.headers if kafka_msg.headers else None,\n).add_errback(on_send_error)\nself.producer.flush()\nlogger.info(\nf\"Forwarded event {ce.get('type')} with channel {ce.get('subject')}\"\n)\nreturn Response(\nstatus=\"200 Event Received\",\n)\n</code></pre>"},{"location":"reference/pathfinderevents/#pathfinderevents.ApiServer.auth_required","title":"<code>auth_required(request)</code>","text":"<p>Return a 401 unauthorized reponse.</p> Source code in <code>pathfinderevents.py</code> <pre><code>def auth_required(self, request):\n\"\"\"Return a 401 unauthorized reponse.\"\"\"\nreturn Response(\n\"Could not verify your access level for that URL.\\n\"\n\"You have to login with proper credentials\",\nstatus=401,\nheaders={\"WWW-Authenticate\": f'Basic realm=\"{self.realm}\"'},\n)\n</code></pre>"},{"location":"reference/pathfinderevents/#pathfinderevents.ApiServer.check_auth","title":"<code>check_auth(username, password)</code>","text":"<p>Check plaintext auth.</p> <p>Pathfinder doesn't support sending any advanced API credentials like JWT or similar so we resort to the most insecure way possible to authenticate its requests.</p> Source code in <code>pathfinderevents.py</code> <pre><code>def check_auth(self, username, password):\n\"\"\"Check plaintext auth.\n    Pathfinder doesn't support sending any advanced API credentials like JWT or\n    similar so we resort to the most insecure way possible to authenticate its\n    requests.\n    \"\"\"\nreturn self.username == username and self.password == password\n</code></pre>"},{"location":"reference/pathfinderevents/#pathfinderevents.ApiServer.dispatch_request","title":"<code>dispatch_request(request)</code>","text":"<p>Dispatch request and return any errors in response.</p> Source code in <code>pathfinderevents.py</code> <pre><code>def dispatch_request(self, request):\n\"\"\"Dispatch request and return any errors in response.\"\"\"\nadapter = self.url_map.bind_to_environ(request.environ)\ntry:\nendpoint, values = adapter.match()\nreturn getattr(self, f\"on_{endpoint}\")(request, **values)\nexcept HTTPException as e:\nreturn Response(\njson.dumps(e.description),\ne.code,\n{\"Content-Type\": \"application/json\"},\n)\n</code></pre>"},{"location":"reference/pathfinderevents/#pathfinderevents.ApiServer.on_webhook","title":"<code>on_webhook(request)</code>","text":"<p>Receive a Pathfinder RestApi call and produce a CloudEvent.</p> Source code in <code>pathfinderevents.py</code> <pre><code>def on_webhook(self, request):\n\"\"\"Receive a Pathfinder RestApi call and produce a CloudEvent.\"\"\"\ndef on_send_error(ex):  # pragma: no cover\nlogger.error(\"Failed to send CloudEvent\", exc_info=ex)\nce = from_pathfinder_request(request)\nkafka_msg = to_structured(\nce,\nkey_mapper=lambda event: \".\".join(\n[\nce.get(\"type\"),\nce.get(\"subject\"),\n]\n),\n)\nself.producer.send(\nself.topic,\nkey=kafka_msg.key,\nvalue=kafka_msg.value,\nheaders=kafka_msg.headers if kafka_msg.headers else None,\n).add_errback(on_send_error)\nself.producer.flush()\nlogger.info(\nf\"Forwarded event {ce.get('type')} with channel {ce.get('subject')}\"\n)\nreturn Response(\nstatus=\"200 Event Received\",\n)\n</code></pre>"},{"location":"reference/pathfinderevents/#pathfinderevents.ApiServer.run_server","title":"<code>run_server()</code>","text":"<p>Run the API server.</p> Source code in <code>pathfinderevents.py</code> <pre><code>def run_server(self):\n\"\"\"Run the API server.\"\"\"\nif not self.producer:\nraise RuntimeError(\"run_server called before set_producer\")\nif self.debug:\nfrom werkzeug.serving import run_simple\nself._server = run_simple(\nself.bind_addr,\nself.bind_port,\nself,\nuse_debugger=True,\nuse_reloader=True,\n)\nelse:  # pragma: no cover\ncherrypy.tree.graft(self, \"/\")\ncherrypy.server.unsubscribe()\nself._server = cherrypy._cpserver.Server()\nself._server.socket_host = self.bind_addr\nself._server.socket_port = self.bind_port\nself._server.subscribe()\ncherrypy.engine.start()\ncherrypy.engine.block()\n</code></pre>"},{"location":"reference/pathfinderevents/#pathfinderevents.ApiServer.stop_server","title":"<code>stop_server()</code>","text":"<p>Stop the server.</p> Source code in <code>pathfinderevents.py</code> <pre><code>def stop_server(self):\n\"\"\"Stop the server.\"\"\"\nself._server.stop()\ncherrypy.engine.exit()\n</code></pre>"},{"location":"reference/pathfinderevents/#pathfinderevents.app","title":"<code>app(api, bootstrap_servers, security_protocol, tls_cafile, tls_certfile, tls_keyfile, topic, max_messages=0)</code>","text":"<p>Set up pathfinder subscription and kafka producer, blocks while processing messages.</p> Source code in <code>pathfinderevents.py</code> <pre><code>def app(\napi: ApiServer,\nbootstrap_servers: list[str],\nsecurity_protocol: str,\ntls_cafile: str,\ntls_certfile: str,\ntls_keyfile: str,\ntopic: str,\nmax_messages: int = 0,\n):\n\"\"\"\n    Set up pathfinder subscription and kafka producer, blocks while processing messages.\n    \"\"\"\nproducer = KafkaProducer(\nbootstrap_servers=bootstrap_servers,\nsecurity_protocol=security_protocol,\nretries=5,\nmax_in_flight_requests_per_connection=1,\nkey_serializer=lambda k: bytes(k, \"utf-8\"),\nssl_cafile=tls_cafile,\nssl_certfile=tls_certfile,\nssl_keyfile=tls_keyfile,\n)\napi.set_producer(producer)\ndef on_sigint(*_):  # pragma: no cover\napi.stop_server()\nproducer.flush()\nproducer.close()\nsys.exit(0)\nsignal.signal(signal.SIGINT, on_sigint)\napi.run_server()  # blocking\nproducer.flush()\nproducer.close()\n</code></pre>"},{"location":"reference/pathfinderevents/#pathfinderevents.from_pathfinder_request","title":"<code>from_pathfinder_request(request)</code>","text":"<p>Convert a basic pathfinder POST request's data into a proper CloudEvent.</p> Source code in <code>pathfinderevents.py</code> <pre><code>def from_pathfinder_request(request: Request) -&gt; CloudEvent:\n\"\"\"Convert a basic pathfinder POST request's data into a proper CloudEvent.\"\"\"\nform = parse_qs(request.get_data(as_text=True))\nreturn CloudEvent(\n{\n\"type\": f\"ch.rabe.api.events.pathfinder.v0alpha1.{form['event'][0]}\",\n\"source\": \"https://github.com/radiorabe/pathfinder-cloudevents-service\",\n\"subject\": form[\"channel\"][0],\n\"datacontenttype\": \"text/plain\",\n},\nform[\"channel\"][0],\n)\n</code></pre>"},{"location":"reference/pathfinderevents/#pathfinderevents.main","title":"<code>main()</code>","text":"<p>CLI entrypoint parses args, sets up logging, and calls <code>app()</code>.</p> Source code in <code>pathfinderevents.py</code> <pre><code>def main():  # pragma: no cover\n\"\"\"\n    CLI entrypoint parses args, sets up logging, and calls `app()`.\n    \"\"\"\nparser = ArgumentParser(\n__name__,\nconfig_file_parser_class=YAMLConfigFileParser,\ndefault_config_files=[f\"{__name__}.yaml\"],\n)\nparser.add(\n\"--bind-addr\",\ndefault=\"0.0.0.0\",\nenv_var=\"APP_BIND_ADDR\",\n)\nparser.add(\n\"--bind-port\",\ndefault=8080,\nenv_var=\"APP_BIND_PORT\",\n)\nparser.add(\n\"--realm\",\ndefault=\"pathfinder\",\nenv_var=\"APP_REALM\",\n)\nparser.add(\n\"--username\",\ndefault=\"pathfinder\",\nenv_var=\"APP_USERNAME\",\n)\nparser.add(\n\"--password\",\nrequired=True,\nenv_var=\"APP_PASSWORD\",\n)\nparser.add(\n\"--kafka-bootstrap-servers\",\nrequired=True,\nenv_var=\"KAFKA_BOOTSTRAP_SERVERS\",\n)\nparser.add(\n\"--kafka-security-protocol\",\ndefault=\"PLAINTEXT\",\nenv_var=\"KAFKA_SECURITY_PROTOCOL\",\n)\nparser.add(\n\"--kafka-tls-cafile\",\ndefault=None,\nenv_var=\"KAFKA_TLS_CAFILE\",\n)\nparser.add(\n\"--kafka-tls-certfile\",\ndefault=None,\nenv_var=\"KAFKA_TLS_CERTFILE\",\n)\nparser.add(\n\"--kafka-tls-keyfile\",\ndefault=None,\nenv_var=\"KAFKA_TLS_KEYFILE\",\n)\nparser.add(\n\"--kafka-topic\",\ndefault=\"dev.cloudevents\",\nenv_var=\"KAFKA_TOPIC\",\n)\nparser.add(\n\"--quiet\",\n\"-q\",\ndefault=False,\naction=\"store_true\",\nenv_var=\"QUIET\",\n)\nparser.add(\n\"--debug\",\ndefault=False,\naction=\"store_true\",\nenv_var=\"DEBUG\",\n)\noptions = parser.parse_args()\nif not options.quiet:\nlogging.basicConfig(level=logging.INFO)\nif options.debug:\nlogging.basicConfig(level=logging.DEBUG)\nlogger.info(f\"Starting {__name__}...\")\napp(\napi=ApiServer(\nbind_addr=options.bind_addr,\nbind_port=options.bind_port,\nrealm=options.realm,\nusername=options.username,\npassword=options.password,\ntopic=options.kafka_topic,\ndebug=options.debug,\n),\nbootstrap_servers=options.kafka_bootstrap_servers,\nsecurity_protocol=options.kafka_security_protocol,\ntls_cafile=options.kafka_tls_cafile,\ntls_certfile=options.kafka_tls_certfile,\ntls_keyfile=options.kafka_tls_keyfile,\ntopic=options.kafka_topic,\n)\n</code></pre>"}]}